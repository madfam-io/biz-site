// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Enums

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  UNQUALIFIED
  CONVERTED
  LOST
}

enum LeadSource {
  WEBSITE
  REFERRAL
  SOCIAL
  EVENT
  DIRECT
  OTHER
}

enum UserRole {
  ADMIN
  EDITOR
  VIEWER
}

enum AssessmentStatus {
  STARTED
  COMPLETED
  ABANDONED
}

// Models

model Lead {
  id          String      @id @default(cuid())
  email       String
  firstName   String?
  lastName    String?
  company     String?
  phone       String?
  message     String?
  source      LeadSource  @default(WEBSITE)
  score       Int         @default(0)
  status      LeadStatus  @default(NEW)
  
  // Metadata
  industry    String?
  companySize String?
  budget      String?
  timeframe   String?
  
  // Tracking
  utmSource   String?
  utmMedium   String?
  utmCampaign String?
  ipAddress   String?
  userAgent   String?
  
  // Relations
  assessments Assessment[]
  calculations Calculation[]
  notes       LeadNote[]
  activities  LeadActivity[]
  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  @@index([email])
  @@index([status])
  @@index([createdAt])
}

model LeadNote {
  id        String   @id @default(cuid())
  content   String
  leadId    String
  lead      Lead     @relation(fields: [leadId], references: [id], onDelete: Cascade)
  authorId  String?
  author    User?    @relation(fields: [authorId], references: [id])
  createdAt DateTime @default(now())
  
  @@index([leadId])
}

model LeadActivity {
  id          String   @id @default(cuid())
  type        String   // email_sent, call_made, meeting_scheduled, etc.
  description String
  leadId      String
  lead        Lead     @relation(fields: [leadId], references: [id], onDelete: Cascade)
  userId      String?
  user        User?    @relation(fields: [userId], references: [id])
  metadata    Json?
  createdAt   DateTime @default(now())
  
  @@index([leadId])
  @@index([type])
  @@index([createdAt])
  @@index([userId])
}

model Assessment {
  id         String           @id @default(cuid())
  leadId     String?
  lead       Lead?            @relation(fields: [leadId], references: [id])
  email      String?
  status     AssessmentStatus @default(STARTED)
  
  // Assessment data
  answers    Json             // Store as JSON for flexibility
  score      Int?
  
  // Results
  strengths  Json?
  weaknesses Json?
  recommendations Json?
  
  createdAt  DateTime         @default(now())
  completedAt DateTime?
  
  @@index([email])
  @@index([status])
  @@index([createdAt])
  @@index([leadId])
}

model Calculation {
  id           String      @id @default(cuid())
  type         String      // roi, project_estimate
  leadId       String?
  lead         Lead?       @relation(fields: [leadId], references: [id])
  email        String?
  
  // Input/Output data
  inputs       Json
  results      Json
  
  // Results summary
  totalValue   Float?
  roi          Float?
  paybackMonths Int?
  
  createdAt    DateTime    @default(now())
  
  @@index([type])
  @@index([email])
  @@index([createdAt])
  @@index([leadId])
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  name          String?
  role          UserRole       @default(VIEWER)
  image         String?
  
  // Auth
  passwordHash  String?
  emailVerified DateTime?
  
  // Relations
  sessions      Session[]
  leadNotes     LeadNote[]
  leadActivities LeadActivity[]
  
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  @@index([email])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

model FeatureFlag {
  id               String   @id @default(cuid())
  key              String   @unique
  name             String
  description      String?
  enabled          Boolean  @default(false)
  
  // Environment-specific settings
  enabledDev       Boolean  @default(true)
  enabledStaging   Boolean  @default(false)
  enabledProd      Boolean  @default(false)
  
  // Rollout configuration
  rolloutPercentage Int?    @default(0)
  userGroups       Json?
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  @@index([key])
}

model AnalyticsEvent {
  id         String   @id @default(cuid())
  event      String
  properties Json?
  userId     String?
  sessionId  String?
  
  // Context
  url        String?
  referrer   String?
  userAgent  String?
  ipAddress  String?
  
  createdAt  DateTime @default(now())
  
  @@index([event])
  @@index([userId])
  @@index([sessionId])
  @@index([createdAt])
}

model EmailQueue {
  id         String   @id @default(cuid())
  to         Json
  subject    String
  template   String
  data       Json
  status     String   @default("pending") // pending, sent, failed
  attempts   Int      @default(0)
  error      String?
  
  sentAt     DateTime?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  @@index([status])
  @@index([createdAt])
}

model Integration {
  id          String   @id @default(cuid())
  name        String   @unique // n8n, slack, crm, etc.
  enabled     Boolean  @default(true)
  config      Json     // Encrypted configuration
  webhookUrl  String?
  apiKey      String?  // Encrypted
  
  lastSync    DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([name])
}
